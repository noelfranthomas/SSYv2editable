{"version":3,"file":"cms.6302909a82d66661208a.hot-update.js","sources":["webpack:///./src/components/Image.js"],"sourcesContent":["import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport Observer from './Observer'\n\nimport './Image.css'\n\nclass Image extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  imageSizes = [\n    '320',\n    '450',\n    '640',\n    '750',\n    '800',\n    '900',\n    '1000',\n    '1200',\n    '1500',\n    '1600',\n    '2000'\n  ] // image sizes used for image source sets\n\n  state = {\n    isIntersecting: false\n  }\n\n  handleIntersection = e => {\n    if (e.isIntersecting) {\n      this.setState({ isIntersecting: true })\n    }\n  }\n\n  checkIsUploadcare(src) {\n    return typeof src === 'string' && src.includes('ucarecdn.com')\n  }\n\n  getResolutionString(res) {\n    /* add resolutions options for inline images */\n    if (res === 'small') {\n      res = '800x'\n    } else if (res === 'medium') {\n      res = '1000x'\n    } else if (res === 'large') {\n      res = '2000x'\n    }\n    return res\n  }\n\n  render() {\n    let {\n      background,\n      backgroundSize = 'cover',\n      resolutions = '1000x',\n      className = '',\n      src,\n      secSet = '',\n      fullSrc,\n      smallSrc,\n      title = '',\n      alt = '',\n      lazy = true\n    } = this.props\n\n    const isUploadcare = this.checkIsUploadcare(src),\n      fullImage = !isUploadcare || !lazy\n\n    /* create source set for images */\n    if (isUploadcare) {\n      secSet = this.imageSizes.map(size => {\n        return `${src}-/progressive/yes/-/format/auto/-/preview/${size}x${size}/-/quality/lightest/${size}.jpg ${size}w`\n      })\n    }\n\n    fullSrc = `${src}${\n      isUploadcare\n        ? '-/progressive/yes/-/format/auto/-/resize/' +\n          this.getResolutionString(resolutions) +\n          '/'\n        : ''\n    }`\n    smallSrc = `${src}${\n      isUploadcare ? '-/progressive/yes/-/format/auto/-/resize/10x/' : ''\n    }`\n\n    let style = {}\n    if (background && lazy) {\n      style = {\n        backgroundImage: `url(${\n          this.state.isIntersecting ? fullSrc : smallSrc\n        })`,\n        backgroundSize\n      }\n    } else {\n      style = {\n        backgroundImage: `url(${fullSrc})`,\n        backgroundSize\n      }\n    }\n\n    return (\n      <Fragment>\n        {isUploadcare && lazy && (\n          <Observer onChange={this.handleIntersection}>\n            <div\n              className=\"BackgroundImage\"\n              ref={this.ref}\n              style={{\n                backgroundImage: `url(${smallSrc})`,\n                backgroundSize: 'cover'\n              }}\n            >\n              {!background && (\n                <img\n                  className={`LazyImage ${\n                    className + this.state.isIntersecting ? ' faded' : ''\n                  }`}\n                  src={this.state.isIntersecting ? fullSrc : ''}\n                  srcSet={this.state.isIntersecting ? secSet : ''}\n                  sizes={'100vw'}\n                  title={title}\n                  alt={alt}\n                />\n              )}\n              {background && (\n                <div\n                  className={`${lazy} LazyImage BackgroundImage absolute ${\n                    className + this.state.isIntersecting ? ' faded' : ''\n                  }`}\n                  style={style}\n                />\n              )}\n            </div>\n          </Observer>\n        )}\n        {fullImage && (\n          <Fragment>\n            {background && (\n              <div\n                className={`BackgroundImage absolute ${className}`}\n                style={style}\n              />\n            )}\n            {!background && (\n              <img\n                className={`roundedCorners`}\n                src={fullSrc}\n                srcSet={secSet}\n                sizes={'100vw'}\n                title={title}\n                alt={alt}\n              />\n            )}\n          </Fragment>\n        )}\n      </Fragment>\n    )\n  }\n}\n\nImage.propTypes = {\n  alt: PropTypes.string.isRequired\n}\n\nexport default Image\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAoBA;AADA;AACA;AApBA;AAwBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA1BA;AAFA;AAGA;AACA;;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AAAA;AACA;AACA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAGA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAGA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;;;;;;;;AA3JA;AACA;AA4JA;AACA;AADA;AAIA;AAAA;;;;;;;;;;AAjKA;;;;;;;;;;;;;;A","sourceRoot":""}