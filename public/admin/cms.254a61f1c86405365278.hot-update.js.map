{"version":3,"file":"cms.254a61f1c86405365278.hot-update.js","sources":["webpack:///./src/components/Gallery.js"],"sourcesContent":["import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport { PhotoSwipe } from 'react-photoswipe'\nimport Image from './Image'\n\nimport _kebabCase from 'lodash/kebabCase'\n\nimport './Gallery.css'\nimport 'react-photoswipe/lib/photoswipe.css'\n\nexport const query = graphql`\n  fragment Gallery on MarkdownRemark {\n    frontmatter {\n      gallery {\n        alt\n        image\n        title\n      }\n    }\n  }\n`\n\nexport default class Gallery extends Component {\n  state = {\n    loaded: false,\n    isOpen: false,\n    sliderImages: [],\n    index: 0\n  }\n\n  isOpen(isOpen, index) {\n    if (typeof index === 'undefined') index = 0\n    this.setState({ isOpen, index })\n  }\n  handleKeyDown = ev => {\n    if (ev.keyCode === 13 && !this.state.isOpen) {\n      // enter to open\n      this.isOpen(true, this.state.index)\n    }\n  }\n\n  getImageInfo = (img, index) =>\n    fetch(img.image + '-/json/')\n      .then(res => res.json())\n      .then(\n        result => {\n          const newImagesArr = [...this.state.sliderImages]\n          newImagesArr[index] = {\n            src: img.image,\n            title: img.title,\n            w: result.width,\n            h: result.height\n          }\n          this.setState({\n            sliderImages: newImagesArr\n          })\n          return true\n        },\n        error => {\n          console.log(error)\n          return false\n        }\n      )\n\n  componentDidMount() {\n    const { images } = this.props,\n      maxCount = images.length\n    let loopCount = 1\n\n    for (let i in images) {\n      if (this.getImageInfo(images[i], i)) {\n        this.setState({ loaded: loopCount === maxCount })\n        loopCount++\n      }\n    }\n  }\n\n  render() {\n    const { images } = this.props\n    return (\n      <Fragment>\n        {images && images.length > 0 && (\n          <div className=\"Gallery\">\n            {images.map((image, index) => (\n              <div\n                className=\"Gallery--Item\"\n                key={_kebabCase(image.alt) + '-' + index}\n                onClick={() => this.isOpen(true, index)}\n                onKeyDown={this.handleKeyDown}\n                tabIndex={0}\n                aria-label=\"Toggle Gallery\"\n                role=\"button\"\n              >\n                <div>\n                  <Image\n                    resolutions=\"small\"\n                    src={image.image}\n                    alt={image.alt}\n                  />\n                </div>\n                {image.title && <figcaption>{image.title}</figcaption>}\n              </div>\n            ))}\n          </div>\n        )}\n        {this.state.loaded && this.state.sliderImages.length > 0 && (\n          <PhotoSwipe\n            isOpen={this.state.isOpen}\n            items={this.state.sliderImages}\n            options={{\n              index: this.state.index,\n              history: false\n            }}\n            onClose={() => this.isOpen(false)}\n          />\n        )}\n      </Fragment>\n    )\n  }\n}\n\nGallery.propTypes = {\n  images: PropTypes.array.isRequired\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAWA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AADA;AACA;AAEA;AACA;AAEA;AACA;AACA;AApBA;AACA;;;;;;AAZA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA8BA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAwBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;;;;;;;;AAjGA;AACA;AADA;AAmGA;AACA;AADA;;;;;;;;;;AA/GA;AAYA;;;;;;;;;;;;;A","sourceRoot":""}